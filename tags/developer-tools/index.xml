<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developer Tools on Loop Invariant</title><link>https://mahesh-hegde.github.io/tags/developer-tools/</link><description>Recent content in Developer Tools on Loop Invariant</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 21 Jun 2025 15:38:10 +0530</lastBuildDate><atom:link href="https://mahesh-hegde.github.io/tags/developer-tools/index.xml" rel="self" type="application/rss+xml"/><item><title>Things you can do with a debugger but not with printf</title><link>https://mahesh-hegde.github.io/posts/what_debugger_can/</link><pubDate>Sat, 21 Jun 2025 15:38:10 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/what_debugger_can/</guid><description>&lt;p>People do or do not use debuggers for a variety of reasons. For one thing, they are hard to setup in many codebases. Second, you can&amp;rsquo;t use them when your application is running on remote environments (such as kuberenetes). So, anecdotally, I have seen way more people using Print/&lt;code>log.Debug&lt;/code> compared to a debugger.&lt;/p>
&lt;p>Which is a shame, because while debug logging is convenient at times, debuggers can do some things which you can&amp;rsquo;t easily simulate via debug logging.&lt;/p></description></item><item><title>Jumping to VSCode Debugger from IPython</title><link>https://mahesh-hegde.github.io/posts/vscode-ipython-debugging/</link><pubDate>Wed, 19 Feb 2025 10:18:17 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/vscode-ipython-debugging/</guid><description>&lt;p>Debuggers and REPL (Interactive prompt / intepreter) are invaluable development tools. They serve mostly complimentary functions.&lt;/p>
&lt;p>A Debugger is most useful to run a program and inspect program state in between. In contrast, an REPL is most useful to try out standard library functions when developing, and try out your own functions too without needing to establish an end-to-end flow (such as an API endpoint or a subcommand). It&amp;rsquo;s especially useful when your functions have complex inputs or outputs, since it allows to express them in the syntax of the host programming language.&lt;/p></description></item><item><title>Ephemeral MySQL for local testing using Docker Compose</title><link>https://mahesh-hegde.github.io/posts/mysql_local_using_compose/</link><pubDate>Tue, 24 Oct 2023 15:31:43 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/mysql_local_using_compose/</guid><description>&lt;h2 id="why">Why?&lt;/h2>
&lt;p>Many times tests are run against a simple database like H2 or SQLite, whereas production uses a heavier DB like MySQL. However, its many times desirable to run testing with the real DB. For example, when the application makes use of DB-specific features or quirks, it&amp;rsquo;s required for proper testing.&lt;/p>
&lt;p>Once upon a time it took long time to setup MySQL through distribution package manager, and tests ideally need ephemeral environments. But now with containers, we can run the same DB in local. Plus, with docker-compose and Docker volumes, we can easily create and tear-down data volumes, giving us clean state when we need.&lt;/p></description></item><item><title>Building jnigen - A Java bindings generator for Dart</title><link>https://mahesh-hegde.github.io/posts/building_jnigen/</link><pubDate>Wed, 19 Jul 2023 19:11:21 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/building_jnigen/</guid><description>&lt;blockquote>
&lt;blockquote>
&lt;p>Caine: Then why bother?&lt;/p>
&lt;p>John: Maybe I am wrong.&lt;/p>&lt;/blockquote>
&lt;p>John Wick 4, (2023)&lt;/p>&lt;/blockquote>
&lt;p>It&amp;rsquo;s been a long overdue to write a post about my past year&amp;rsquo;s Google Summer of Code (GSoC) project. &lt;a href="https://github.com/dart-lang/jnigen">jnigen&lt;/a> is an experimental bindings generator which aims to provide Java interoperability for Dart. It works by generating wrappers which call JNI through Dart&amp;rsquo;s FFI (Foreign Function Interface).&lt;/p>
&lt;p>I developed the initial versions of this package under the guidance of Daco Harkes and Liam Appelbe from Dart team. Hossein Yousefi from Dart team is developing the project further, adding many features such as Generics and Kotlin language support.&lt;/p></description></item><item><title>Running PostgreSQL locally for back-end development using Docker</title><link>https://mahesh-hegde.github.io/posts/postgres_local_using_docker/</link><pubDate>Sat, 13 May 2023 11:36:39 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/postgres_local_using_docker/</guid><description>&lt;p>When doing back-end development or just fiddling with SQL, installing postgres the traditional way may not be very convenient for many reasons. This post describes how to run postgres for local development using docker and docker compose.&lt;/p>
&lt;p>One important advantage for me is getting the latest version of postgres, since I tend to use a stable linux distribution.&lt;/p>
&lt;p>There&amp;rsquo;s already some amount of documentation for postgresql official docker image. But few things are less than obvious if you&amp;rsquo;re a beginner like me.&lt;/p></description></item></channel></rss>