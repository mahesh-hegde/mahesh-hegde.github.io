<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Loop Invariant</title><link>https://mahesh-hegde.github.io/tags/java/</link><description>Recent content in Java on Loop Invariant</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 19 Jul 2023 19:11:21 +0530</lastBuildDate><atom:link href="https://mahesh-hegde.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Building jnigen - A Java bindings generator for Dart</title><link>https://mahesh-hegde.github.io/posts/building_jnigen/</link><pubDate>Wed, 19 Jul 2023 19:11:21 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/building_jnigen/</guid><description>&lt;blockquote>
&lt;blockquote>
&lt;p>Caine: Then why bother?&lt;/p>
&lt;p>John: Maybe I am wrong.&lt;/p>&lt;/blockquote>
&lt;p>John Wick 4, (2023)&lt;/p>&lt;/blockquote>
&lt;p>It&amp;rsquo;s been a long overdue to write a post about my past year&amp;rsquo;s Google Summer of Code (GSoC) project. &lt;a href="https://github.com/dart-lang/jnigen">jnigen&lt;/a> is an experimental bindings generator which aims to provide Java interoperability for Dart. It works by generating wrappers which call JNI through Dart&amp;rsquo;s FFI (Foreign Function Interface).&lt;/p>
&lt;p>I developed the initial versions of this package under the guidance of Daco Harkes and Liam Appelbe from Dart team. Hossein Yousefi from Dart team is developing the project further, adding many features such as Generics and Kotlin language support.&lt;/p></description></item><item><title>Non-algorithm optimization of K closest elements Java solution</title><link>https://mahesh-hegde.github.io/posts/leetcode_optimize_k_closest_elements/</link><pubDate>Tue, 21 Mar 2023 07:07:17 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/leetcode_optimize_k_closest_elements/</guid><description>&lt;p>I am a weird creature in my friend circle for using Java to do DSA problems. (Everyone else uses C++). I am not that good anyway in Leetcode, so at least I will learn some more Java by doing this.&lt;/p>
&lt;p>Here&amp;rsquo;s the puzzle I was attempting to solve: Given a sorted array and an integer &lt;code>x&lt;/code>, find k elements closest to &lt;code>x&lt;/code> in the array (&lt;a href="https://leetcode.com/problems/find-k-closest-elements/">Leetcode #658&lt;/a>).&lt;/p>
&lt;p>The solution is very straightforward: find the lower bound or upper bound of the element in the array using built-in binary search, then expand the range using 2 indexes.&lt;/p></description></item></channel></rss>