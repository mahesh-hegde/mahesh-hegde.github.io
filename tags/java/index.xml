<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on Mahesh's Blog</title><link>https://mahesh-hegde.github.io/tags/java/</link><description>Recent content in java on Mahesh's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 Mar 2023 07:07:17 +0530</lastBuildDate><atom:link href="https://mahesh-hegde.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Non-algorithm optimization of K closest elements Java solution</title><link>https://mahesh-hegde.github.io/posts/lc_optimize_k_closest_elements/</link><pubDate>Tue, 21 Mar 2023 07:07:17 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/lc_optimize_k_closest_elements/</guid><description>I am a weird creature in my friend circle for using Java to do DSA problems. (Everyone else uses C++). I am not that good anyway in Leetcode, so at least I will learn some more Java by doing this.
Here&amp;rsquo;s the puzzle I was attempting to solve: Given a sorted array and an integer x, find k elements closest to x in the array (Leetcode #658).
The solution is very straightforward: find the lower bound or upper bound of the element in the array using built-in binary search, then expand the range using 2 indexes.</description></item></channel></rss>