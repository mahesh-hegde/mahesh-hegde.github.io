<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C on Loop Invariant</title><link>https://mahesh-hegde.github.io/tags/c/</link><description>Recent content in C on Loop Invariant</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 07 Jan 2023 18:35:13 +0530</lastBuildDate><atom:link href="https://mahesh-hegde.github.io/tags/c/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenMP and rand() function - A small story</title><link>https://mahesh-hegde.github.io/posts/omp_rand_critical_section/</link><pubDate>Sat, 07 Jan 2023 18:35:13 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/omp_rand_critical_section/</guid><description>&lt;p>I have a parallel programming subject this semester, and as usual, there&amp;rsquo;s also a lab in which we try and execute small programs (mostly using OpenMP).&lt;/p>
&lt;p>First program is to find the value of &lt;code>Pi&lt;/code> using Monte carlo methods. We have to then measure the performance with different number of threads, and tabulate it.&lt;/p>
&lt;p>Usually, when we add threads using &lt;code>pragma omp parallel for&lt;/code> directive, we expect the program to take less time. Here&amp;rsquo;s an implementation that everyone wrote:&lt;/p></description></item></channel></rss>