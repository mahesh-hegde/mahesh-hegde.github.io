<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mahesh's Blog</title><link>https://mahesh-hegde.github.io/</link><description>Recent content on Mahesh's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 Mar 2023 07:07:17 +0530</lastBuildDate><atom:link href="https://mahesh-hegde.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Non-algorithm optimization of K closest elements Java solution</title><link>https://mahesh-hegde.github.io/posts/lc_optimize_k_closest_elements/</link><pubDate>Tue, 21 Mar 2023 07:07:17 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/lc_optimize_k_closest_elements/</guid><description>I am a weird creature in my friend circle for using Java to do DSA problems. (Everyone else uses C++). I am not that good anyway in Leetcode, so at least I will learn some more Java by doing this.
Here&amp;rsquo;s the puzzle I was attempting to solve: Given a sorted array and an integer x, find k elements closest to x in the array (Leetcode #658).
The solution is very straightforward: find the lower bound or upper bound of the element in the array using built-in binary search, then expand the range using 2 indexes.</description></item><item><title>Leetcode #995: Minimum number of K bit flips</title><link>https://mahesh-hegde.github.io/posts/lc_995/</link><pubDate>Mon, 20 Mar 2023 11:03:56 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/lc_995/</guid><description>This is my solution and logic for Problem 995 on Leetcode. This is actually copy of solution I posted on discussion forums.
I find it a little hard to get the initial intuition &amp;amp; optimization from O(nk) to O(n), and as usual, other solution posts are very terse. So I thought it is worth to explain a little more.
Problem statement You are given a binary array nums and an integer k.</description></item><item><title>OpenMP and rand() function - A small story</title><link>https://mahesh-hegde.github.io/posts/omp_rand_critical_section/</link><pubDate>Sat, 07 Jan 2023 18:35:13 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/omp_rand_critical_section/</guid><description>I have a parallel programming subject this semester, and as usual, there&amp;rsquo;s also a lab in which we try and execute small programs. Mostly OpenMP programs.
First program is to find the value of Pi using Monte carlo methods. We have to then measure the performance with different number of threads, and tabulate it.
Usually, when we add threads using pragma omp parallel for directive, we expect the program to take less time.</description></item><item><title>About Me</title><link>https://mahesh-hegde.github.io/about/</link><pubDate>Tue, 13 Sep 2022 07:54:01 +0530</pubDate><guid>https://mahesh-hegde.github.io/about/</guid><description>Hi, I am Mahesh.
I am a CSE Undergrad originally from North Kanara and currently studying in Bangalore.
I am looking for a 4-6 month internship in this spring. Please drop me an email at net.mahesh29 [at] gmail.com if you&amp;rsquo;re hiring interns / new grad SDE around Bangalore, or remotely in India.
I have a good hold of fundamental concepts and problem solving skills, along with some experience in Go, Java, C, Linux command line etc.</description></item></channel></rss>