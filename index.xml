<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Loop Invariant</title><link>https://mahesh-hegde.github.io/</link><description>Recent content on Loop Invariant</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 21 Jun 2025 15:38:10 +0530</lastBuildDate><atom:link href="https://mahesh-hegde.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Some tricks for Bash shell interactive usage</title><link>https://mahesh-hegde.github.io/posts/bash_interactive/</link><pubDate>Sat, 21 Jun 2025 15:38:10 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/bash_interactive/</guid><description>&lt;p>While I am not a strict command line affectionado, I have found myself to spend significant time in the terminal, especially when doing devops-y work. Here are some things I learned which will improve the speed when working in terminal.&lt;/p>
&lt;p>Note that many of the snippets here were found by me / edited long back. I may not be able to attribute the correct source of each snippet. Let me know if you know the original sources of any snippets posted herein.&lt;/p></description></item><item><title>Things you can do with a debugger but not with printf</title><link>https://mahesh-hegde.github.io/posts/what_debugger_can/</link><pubDate>Sat, 21 Jun 2025 15:38:10 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/what_debugger_can/</guid><description>&lt;p>People do or do not use debuggers for a variety of reasons. For one thing, they are hard to setup in many codebases. Second, you can&amp;rsquo;t use them when your application is running on remote environments (such as kuberenetes). So, anecdotally, I have seen way more people using Print/&lt;code>log.Debug&lt;/code> compared to a debugger.&lt;/p>
&lt;p>Which is a shame, because while debug logging is convenient at times, debuggers can do some things which you can&amp;rsquo;t easily simulate via debug logging.&lt;/p></description></item><item><title>Jumping to VSCode Debugger from IPython</title><link>https://mahesh-hegde.github.io/posts/vscode-ipython-debugging/</link><pubDate>Wed, 19 Feb 2025 10:18:17 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/vscode-ipython-debugging/</guid><description>&lt;p>Debuggers and REPL (Interactive prompt / intepreter) are invaluable development tools. They serve mostly complimentary functions.&lt;/p>
&lt;p>A Debugger is most useful to run a program and inspect program state in between. In contrast, an REPL is most useful to try out standard library functions when developing, and try out your own functions too without needing to establish an end-to-end flow (such as an API endpoint or a subcommand). It&amp;rsquo;s especially useful when your functions have complex inputs or outputs, since it allows to express them in the syntax of the host programming language.&lt;/p></description></item><item><title>A tale of Interface Smuggling in Go net/http</title><link>https://mahesh-hegde.github.io/posts/go-interface-smuggling/</link><pubDate>Fri, 01 Mar 2024 18:59:00 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/go-interface-smuggling/</guid><description>&lt;h2 id="the-humble-beginnings">The humble beginnings&lt;/h2>
&lt;p>Once upon a time, I had a use case for serving the contents inside of a zip file over HTTP, preferably without unpacking the &lt;code>.zip&lt;/code> to a temporary directory.&lt;/p>
&lt;p>Go is a language made for writing HTTP servers. Since we can represent zip file as a filesystem &lt;code>fs.FS&lt;/code>, how hard would it be to write a file server to serve files from it?&lt;/p>
&lt;p>Well, it was harder than I thought.&lt;/p></description></item><item><title>Ephemeral MySQL for local testing using Docker Compose</title><link>https://mahesh-hegde.github.io/posts/mysql_local_using_compose/</link><pubDate>Tue, 24 Oct 2023 15:31:43 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/mysql_local_using_compose/</guid><description>&lt;h2 id="why">Why?&lt;/h2>
&lt;p>Many times tests are run against a simple database like H2 or SQLite, whereas production uses a heavier DB like MySQL. However, its many times desirable to run testing with the real DB. For example, when the application makes use of DB-specific features or quirks, it&amp;rsquo;s required for proper testing.&lt;/p>
&lt;p>Once upon a time it took long time to setup MySQL through distribution package manager, and tests ideally need ephemeral environments. But now with containers, we can run the same DB in local. Plus, with docker-compose and Docker volumes, we can easily create and tear-down data volumes, giving us clean state when we need.&lt;/p></description></item><item><title>Reading List</title><link>https://mahesh-hegde.github.io/readings/</link><pubDate>Sun, 27 Aug 2023 22:37:36 +0530</pubDate><guid>https://mahesh-hegde.github.io/readings/</guid><description>&lt;p>This page includes an infrequently-updated list of interesting articles I have read recently and think to be significantly impactful.&lt;/p>
&lt;h3 id="computer-science---general">Computer Science - General&lt;/h3>
&lt;p>These are generic - useful and educational software engineers regardless of what domain they work in.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.dreamsongs.com/RiseOfWorseIsBetter.html">&lt;strong>&amp;ldquo;Worse is Better&amp;rdquo;&lt;/strong>&lt;/a> - An essay which describes how the &amp;ldquo;perfectly designed&amp;rdquo; software loses to &amp;ldquo;worse-designed&amp;rdquo; counterparts. I think every software engineer should read this once.&lt;/p>
&lt;blockquote>
&lt;p>The New Jersey guy said that the Unix solution was right because the design philosophy of Unix was simplicity and that the right thing was too complex. Besides, programmers could easily insert this extra test and loop. The MIT guy pointed out that the implementation was simple but the interface to the functionality was complex. The New Jersey guy said that the right tradeoff has been selected in Unix &amp;ndash; namely, implementation simplicity was more important than interface simplicity.&lt;/p></description></item><item><title>Exploring distroless docker images</title><link>https://mahesh-hegde.github.io/posts/distroless/</link><pubDate>Sun, 27 Aug 2023 20:53:10 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/distroless/</guid><description>&lt;p>I recently discovered the concept of &lt;a href="https://github.com/GoogleContainerTools/distroless">distroless&lt;/a> docker images. However, this project is quite a few years old.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>The name may be quite misleading (much like &amp;ldquo;serverless&amp;rdquo;) - as distroless images are actually based on Debian (currently Debian 11, Bullseye). However, they don&amp;rsquo;t contain most of the stuff which is there in standard debian image, which such as all the command line executables (&lt;code>coreutils&lt;/code> etc..)&lt;/p>
&lt;h3 id="whats-there-in-a-standard-debian-image">What&amp;rsquo;s there in a standard Debian image?&lt;/h3>
&lt;p>Let&amp;rsquo;s pull and inspect a standard debian docker image:&lt;/p></description></item><item><title>Usefulness of Go templates in command line tools</title><link>https://mahesh-hegde.github.io/posts/go_templates_in_command_line_tools/</link><pubDate>Wed, 09 Aug 2023 08:10:08 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/go_templates_in_command_line_tools/</guid><description>&lt;p>Almost every time I see &lt;code>awk&lt;/code> in a shell script, it is to extract a particular column - like &lt;code>awk '{print $1}'&lt;/code>.&lt;/p>
&lt;p>Much has been written and said about how the plain text output of command line tools isn&amp;rsquo;t very flexible. Therefore powershell uses an object paradigm, where nobody understands what is going on. It appears a few tools, like Azure CLI have just defaulted to printing JSON. But this also breaks some long-developed intuitions like using &lt;code>grep&lt;/code> or other UNIX tools.&lt;/p></description></item><item><title>Building jnigen - A Java bindings generator for Dart</title><link>https://mahesh-hegde.github.io/posts/building_jnigen/</link><pubDate>Wed, 19 Jul 2023 19:11:21 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/building_jnigen/</guid><description>&lt;blockquote>
&lt;blockquote>
&lt;p>Caine: Then why bother?&lt;/p>
&lt;p>John: Maybe I am wrong.&lt;/p>&lt;/blockquote>
&lt;p>John Wick 4, (2023)&lt;/p>&lt;/blockquote>
&lt;p>It&amp;rsquo;s been a long overdue to write a post about my past year&amp;rsquo;s Google Summer of Code (GSoC) project. &lt;a href="https://github.com/dart-lang/jnigen">jnigen&lt;/a> is an experimental bindings generator which aims to provide Java interoperability for Dart. It works by generating wrappers which call JNI through Dart&amp;rsquo;s FFI (Foreign Function Interface).&lt;/p>
&lt;p>I developed the initial versions of this package under the guidance of Daco Harkes and Liam Appelbe from Dart team. Hossein Yousefi from Dart team is developing the project further, adding many features such as Generics and Kotlin language support.&lt;/p></description></item><item><title>Running PostgreSQL locally for back-end development using Docker</title><link>https://mahesh-hegde.github.io/posts/postgres_local_using_docker/</link><pubDate>Sat, 13 May 2023 11:36:39 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/postgres_local_using_docker/</guid><description>&lt;p>When doing back-end development or just fiddling with SQL, installing postgres the traditional way may not be very convenient for many reasons. This post describes how to run postgres for local development using docker and docker compose.&lt;/p>
&lt;p>One important advantage for me is getting the latest version of postgres, since I tend to use a stable linux distribution.&lt;/p>
&lt;p>There&amp;rsquo;s already some amount of documentation for postgresql official docker image. But few things are less than obvious if you&amp;rsquo;re a beginner like me.&lt;/p></description></item><item><title>Non-algorithm optimization of K closest elements Java solution</title><link>https://mahesh-hegde.github.io/posts/leetcode_optimize_k_closest_elements/</link><pubDate>Tue, 21 Mar 2023 07:07:17 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/leetcode_optimize_k_closest_elements/</guid><description>&lt;p>I am a weird creature in my friend circle for using Java to do DSA problems. (Everyone else uses C++). I am not that good anyway in Leetcode, so at least I will learn some more Java by doing this.&lt;/p>
&lt;p>Here&amp;rsquo;s the puzzle I was attempting to solve: Given a sorted array and an integer &lt;code>x&lt;/code>, find k elements closest to &lt;code>x&lt;/code> in the array (&lt;a href="https://leetcode.com/problems/find-k-closest-elements/">Leetcode #658&lt;/a>).&lt;/p>
&lt;p>The solution is very straightforward: find the lower bound or upper bound of the element in the array using built-in binary search, then expand the range using 2 indexes.&lt;/p></description></item><item><title>Leetcode #995: Minimum number of K bit flips</title><link>https://mahesh-hegde.github.io/posts/leetcode_995/</link><pubDate>Mon, 20 Mar 2023 11:03:56 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/leetcode_995/</guid><description>&lt;p>This is my solution and logic for &lt;a href="https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips/">Problem 995&lt;/a> on Leetcode. This is actually copy of solution I posted on discussion forums.&lt;/p>
&lt;p>I find it a little hard to get the initial intuition &amp;amp; optimization from &lt;code>O(nk)&lt;/code> to &lt;code>O(n)&lt;/code>, and as usual, other solution posts are very terse. So I thought it is worth to explain a little more.&lt;/p>
&lt;h2 id="problem-statement">Problem statement&lt;/h2>
&lt;blockquote>
&lt;p>You are given a binary array nums and an integer &lt;code>k&lt;/code>.&lt;/p></description></item><item><title>OpenMP and rand() function - A small story</title><link>https://mahesh-hegde.github.io/posts/omp_rand_critical_section/</link><pubDate>Sat, 07 Jan 2023 18:35:13 +0530</pubDate><guid>https://mahesh-hegde.github.io/posts/omp_rand_critical_section/</guid><description>&lt;p>I have a parallel programming subject this semester, and as usual, there&amp;rsquo;s also a lab in which we try and execute small programs (mostly using OpenMP).&lt;/p>
&lt;p>First program is to find the value of &lt;code>Pi&lt;/code> using Monte carlo methods. We have to then measure the performance with different number of threads, and tabulate it.&lt;/p>
&lt;p>Usually, when we add threads using &lt;code>pragma omp parallel for&lt;/code> directive, we expect the program to take less time. Here&amp;rsquo;s an implementation that everyone wrote:&lt;/p></description></item><item><title>Curriculum Vitae</title><link>https://mahesh-hegde.github.io/cv/</link><pubDate>Tue, 13 Sep 2022 07:54:01 +0530</pubDate><guid>https://mahesh-hegde.github.io/cv/</guid><description>&lt;h2 id="about">About&lt;/h2>
&lt;p>A software engineer with an enthusiasm for systems-level thinking and scientific approach to engineering problems.&lt;/p>
&lt;p>Interested in operating systems, compilers, developer tools, programming languages, back-end development and databases. I have some experience tackling difficult architectural, implementation and debugging challenges.&lt;/p>
&lt;p>Email: &lt;code>net.mahesh29&lt;/code> @ &lt;code>gmail.com&lt;/code>&lt;/p>
&lt;h2 id="experience">Experience&lt;/h2>
&lt;h4 id="software-developer-oracle">Software Developer, Oracle&lt;/h4>
&lt;h5 id="aug-2023---present">Aug 2023 - Present&lt;/h5>
&lt;ul>
&lt;li>Member of a fast-paced platform team, building a kubernetes based microservice platform for other teams to develop on.&lt;/li>
&lt;li>Implemented and enhanced back-end services for virtual machine management with cloud-native software stack consisting Python (FastAPI) and Oracle and Oracle NoSQL.&lt;/li>
&lt;li>Resolved important issues related to identity, streaming, containers, logging and more, by utilizing architectural knowledge of cloud and distributed systems, unblocking critical initiatives.&lt;/li>
&lt;li>Developed infrastructure automations with terraform, kubernetes, docker, CI / CD and shell scripts.&lt;/li>
&lt;li>Designed and implemented a OpenAI-compatible proxy in Go to enable interoperability of in-house AI solutions with open-source tools.&lt;/li>
&lt;/ul>
&lt;h4 id="software-engineer-intern-dunzo">Software Engineer Intern, Dunzo&lt;/h4>
&lt;h5 id="jan-2023---jul-2023">Jan 2023 - Jul 2023&lt;/h5>
&lt;ul>
&lt;li>Improved performance of the java test suite by ~50% using connection pools, multithreading etc..&lt;/li>
&lt;li>Developed test automations for ETL pipelines using JDBC and Google Cloud libaries.&lt;/li>
&lt;li>Optimized GitHub Actions pipeline runtime by ~50% with a simple change using maven cache.&lt;/li>
&lt;/ul>
&lt;h4 id="open-source-contributor-google-summer-of-code">Open source contributor, Google Summer of Code&lt;/h4>
&lt;h5 id="jun-2022---nov-2022">Jun 2022 - Nov 2022&lt;/h5>
&lt;ul>
&lt;li>Architected &lt;a href="https://mahesh-hegde.github.io/posts/building_jnigen/">jnigen&lt;/a>: Code generator which enables calling java libraries from dart language&lt;/li>
&lt;li>Developed various components including code generator, runtime library and Android / Windows build system integrations.&lt;/li>
&lt;li>Owned the project end to end during prototype phase. Collaborated with senior engineers through code reviews and ensured smooth knowledge transfer.&lt;/li>
&lt;/ul>
&lt;h2 id="skills">Skills&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>General skills:&lt;/strong> - Data structures &amp;amp; algorithms, Operating systems, compilers, performance optimization, back-end development, Database design, Linux, DevOps, CI / CD.&lt;/p></description></item></channel></rss>